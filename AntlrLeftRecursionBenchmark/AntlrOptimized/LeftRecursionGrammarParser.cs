extern alias AntlrOptimized;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrOptimized {
using AntlrOptimized::Antlr4.Runtime;
using AntlrOptimized::Antlr4.Runtime.Atn;
using AntlrOptimized::Antlr4.Runtime.Misc;
using AntlrOptimized::Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = AntlrOptimized::Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LeftRecursionGrammarParser : Parser {
	public const int
		CARET=1, STAR=2, SLASH=3, PERCENT=4, PLUS=5, MINUS=6, EQUAL=7, NOT_EQUAL=8,
		LOGICAL_AND=9, LOGICAL_OR=10, QUESTION=11, COLON=12, ID=13, DIGIT=14,
		WS=15;
	public const int
		RULE_leftRecExprRoot = 0, RULE_notLeftRecExprRoot = 1, RULE_leftRecExpr = 2,
		RULE_notLeftRecExpr = 3, RULE_logicalAndExpr = 4, RULE_equalExpr = 5,
		RULE_addExpr = 6, RULE_multExpr = 7, RULE_powerExpr = 8, RULE_atom = 9;
	public static readonly string[] ruleNames = {
		"leftRecExprRoot", "notLeftRecExprRoot", "leftRecExpr", "notLeftRecExpr",
		"logicalAndExpr", "equalExpr", "addExpr", "multExpr", "powerExpr", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", "'!='", "'&&'",
		"'||'", "'?'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CARET", "STAR", "SLASH", "PERCENT", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL",
		"LOGICAL_AND", "LOGICAL_OR", "QUESTION", "COLON", "ID", "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LeftRecursionGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LeftRecursionGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class LeftRecExprRootContext : ParserRuleContext {
		public LeftRecExprContext leftRecExpr() {
			return GetRuleContext<LeftRecExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LeftRecursionGrammarParser.Eof, 0); }
		public LeftRecExprRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftRecExprRoot; } }
	}

	[RuleVersion(0)]
	public LeftRecExprRootContext leftRecExprRoot() {
		LeftRecExprRootContext _localctx = new LeftRecExprRootContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_leftRecExprRoot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; leftRecExpr(0);
			State = 21; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotLeftRecExprRootContext : ParserRuleContext {
		public NotLeftRecExprContext notLeftRecExpr() {
			return GetRuleContext<NotLeftRecExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LeftRecursionGrammarParser.Eof, 0); }
		public NotLeftRecExprRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notLeftRecExprRoot; } }
	}

	[RuleVersion(0)]
	public NotLeftRecExprRootContext notLeftRecExprRoot() {
		NotLeftRecExprRootContext _localctx = new NotLeftRecExprRootContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_notLeftRecExprRoot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23; notLeftRecExpr();
			State = 24; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftRecExprContext : ParserRuleContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public LeftRecExprContext[] leftRecExpr() {
			return GetRuleContexts<LeftRecExprContext>();
		}
		public LeftRecExprContext leftRecExpr(int i) {
			return GetRuleContext<LeftRecExprContext>(i);
		}
		public LeftRecExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftRecExpr; } }
	}

	[RuleVersion(0)]
	public LeftRecExprContext leftRecExpr() {
		return leftRecExpr(0);
	}

	private LeftRecExprContext leftRecExpr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		LeftRecExprContext _localctx = new LeftRecExprContext(_ctx, _parentState);
		LeftRecExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_leftRecExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 27; atom();
			}
			_ctx.stop = _input.Lt(-1);
			State = 49;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=AntlrOptimized::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 47;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
					case 1:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 29;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 30; Match(CARET);
						State = 31; leftRecExpr(6);
						}
						break;

					case 2:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 32;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 33;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 34; leftRecExpr(6);
						}
						break;

					case 3:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 35;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 36;
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 37; leftRecExpr(5);
						}
						break;

					case 4:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 38;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 39;
						_la = _input.La(1);
						if ( !(_la==EQUAL || _la==NOT_EQUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 40; leftRecExpr(4);
						}
						break;

					case 5:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 41;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 42; Match(LOGICAL_AND);
						State = 43; leftRecExpr(3);
						}
						break;

					case 6:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 44;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 45; Match(LOGICAL_OR);
						State = 46; leftRecExpr(2);
						}
						break;
					}
					}
				}
				State = 51;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NotLeftRecExprContext : ParserRuleContext {
		public LogicalAndExprContext[] logicalAndExpr() {
			return GetRuleContexts<LogicalAndExprContext>();
		}
		public LogicalAndExprContext logicalAndExpr(int i) {
			return GetRuleContext<LogicalAndExprContext>(i);
		}
		public NotLeftRecExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notLeftRecExpr; } }
	}

	[RuleVersion(0)]
	public NotLeftRecExprContext notLeftRecExpr() {
		NotLeftRecExprContext _localctx = new NotLeftRecExprContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_notLeftRecExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; logicalAndExpr();
			State = 57;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LOGICAL_OR) {
				{
				{
				State = 53; Match(LOGICAL_OR);
				State = 54; logicalAndExpr();
				}
				}
				State = 59;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExprContext : ParserRuleContext {
		public EqualExprContext[] equalExpr() {
			return GetRuleContexts<EqualExprContext>();
		}
		public EqualExprContext equalExpr(int i) {
			return GetRuleContext<EqualExprContext>(i);
		}
		public LogicalAndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpr; } }
	}

	[RuleVersion(0)]
	public LogicalAndExprContext logicalAndExpr() {
		LogicalAndExprContext _localctx = new LogicalAndExprContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_logicalAndExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; equalExpr();
			State = 65;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LOGICAL_AND) {
				{
				{
				State = 61; Match(LOGICAL_AND);
				State = 62; equalExpr();
				}
				}
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public EqualExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalExpr; } }
	}

	[RuleVersion(0)]
	public EqualExprContext equalExpr() {
		EqualExprContext _localctx = new EqualExprContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_equalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; addExpr();
			State = 73;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EQUAL || _la==NOT_EQUAL) {
				{
				{
				State = 69;
				_la = _input.La(1);
				if ( !(_la==EQUAL || _la==NOT_EQUAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 70; addExpr();
				}
				}
				State = 75;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; multExpr();
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 77;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 78; multExpr();
				}
				}
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		public PowerExprContext[] powerExpr() {
			return GetRuleContexts<PowerExprContext>();
		}
		public PowerExprContext powerExpr(int i) {
			return GetRuleContext<PowerExprContext>(i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_multExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; powerExpr();
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) {
				{
				{
				State = 85;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 86; powerExpr();
				}
				}
				State = 91;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerExprContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public PowerExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powerExpr; } }
	}

	[RuleVersion(0)]
	public PowerExprContext powerExpr() {
		PowerExprContext _localctx = new PowerExprContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_powerExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; atom();
			State = 97;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CARET) {
				{
				{
				State = 93; Match(CARET);
				State = 94; atom();
				}
				}
				State = 99;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(LeftRecursionGrammarParser.ID, 0); }
		public ITerminalNode DIGIT() { return GetToken(LeftRecursionGrammarParser.DIGIT, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_la = _input.La(1);
			if ( !(_la==ID || _la==DIGIT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return leftRecExpr_sempred((LeftRecExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool leftRecExpr_sempred(LeftRecExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 3);

		case 4: return Precpred(_ctx, 2);

		case 5: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x11i\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4\x32\n\x4\f\x4\xE\x4\x35"+
		"\v\x4\x3\x5\x3\x5\x3\x5\a\x5:\n\x5\f\x5\xE\x5=\v\x5\x3\x6\x3\x6\x3\x6"+
		"\a\x6\x42\n\x6\f\x6\xE\x6\x45\v\x6\x3\a\x3\a\x3\a\a\aJ\n\a\f\a\xE\aM\v"+
		"\a\x3\b\x3\b\x3\b\a\bR\n\b\f\b\xE\bU\v\b\x3\t\x3\t\x3\t\a\tZ\n\t\f\t\xE"+
		"\t]\v\t\x3\n\x3\n\x3\n\a\n\x62\n\n\f\n\xE\n\x65\v\n\x3\v\x3\v\x3\v\x2"+
		"\x2\x3\x6\f\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x2\x6\x3\x2\x4\x6\x3\x2\a\b\x3\x2\t\n\x3\x2\xF\x10j\x2\x16\x3\x2\x2\x2"+
		"\x4\x19\x3\x2\x2\x2\x6\x1C\x3\x2\x2\x2\b\x36\x3\x2\x2\x2\n>\x3\x2\x2\x2"+
		"\f\x46\x3\x2\x2\x2\xEN\x3\x2\x2\x2\x10V\x3\x2\x2\x2\x12^\x3\x2\x2\x2\x14"+
		"\x66\x3\x2\x2\x2\x16\x17\x5\x6\x4\x2\x17\x18\a\x2\x2\x3\x18\x3\x3\x2\x2"+
		"\x2\x19\x1A\x5\b\x5\x2\x1A\x1B\a\x2\x2\x3\x1B\x5\x3\x2\x2\x2\x1C\x1D\b"+
		"\x4\x1\x2\x1D\x1E\x5\x14\v\x2\x1E\x33\x3\x2\x2\x2\x1F \f\b\x2\x2 !\a\x3"+
		"\x2\x2!\x32\x5\x6\x4\b\"#\f\a\x2\x2#$\t\x2\x2\x2$\x32\x5\x6\x4\b%&\f\x6"+
		"\x2\x2&\'\t\x3\x2\x2\'\x32\x5\x6\x4\a()\f\x5\x2\x2)*\t\x4\x2\x2*\x32\x5"+
		"\x6\x4\x6+,\f\x4\x2\x2,-\a\v\x2\x2-\x32\x5\x6\x4\x5./\f\x3\x2\x2/\x30"+
		"\a\f\x2\x2\x30\x32\x5\x6\x4\x4\x31\x1F\x3\x2\x2\x2\x31\"\x3\x2\x2\x2\x31"+
		"%\x3\x2\x2\x2\x31(\x3\x2\x2\x2\x31+\x3\x2\x2\x2\x31.\x3\x2\x2\x2\x32\x35"+
		"\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34\a\x3\x2\x2\x2"+
		"\x35\x33\x3\x2\x2\x2\x36;\x5\n\x6\x2\x37\x38\a\f\x2\x2\x38:\x5\n\x6\x2"+
		"\x39\x37\x3\x2\x2\x2:=\x3\x2\x2\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<\t\x3"+
		"\x2\x2\x2=;\x3\x2\x2\x2>\x43\x5\f\a\x2?@\a\v\x2\x2@\x42\x5\f\a\x2\x41"+
		"?\x3\x2\x2\x2\x42\x45\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2"+
		"\x2\x44\v\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x46K\x5\xE\b\x2GH\t\x4\x2\x2"+
		"HJ\x5\xE\b\x2IG\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2"+
		"L\r\x3\x2\x2\x2MK\x3\x2\x2\x2NS\x5\x10\t\x2OP\t\x3\x2\x2PR\x5\x10\t\x2"+
		"QO\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2T\xF\x3\x2\x2"+
		"\x2US\x3\x2\x2\x2V[\x5\x12\n\x2WX\t\x2\x2\x2XZ\x5\x12\n\x2YW\x3\x2\x2"+
		"\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\\x11\x3\x2\x2\x2][\x3"+
		"\x2\x2\x2^\x63\x5\x14\v\x2_`\a\x3\x2\x2`\x62\x5\x14\v\x2\x61_\x3\x2\x2"+
		"\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x13"+
		"\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66g\t\x5\x2\x2g\x15\x3\x2\x2\x2\n\x31"+
		"\x33;\x43KS[\x63";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AntlrOptimized
