extern alias AntlrOptimized;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrOptimized {
using AntlrOptimized::Antlr4.Runtime;
using AntlrOptimized::Antlr4.Runtime.Atn;
using AntlrOptimized::Antlr4.Runtime.Misc;
using DFA = AntlrOptimized::Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LeftRecursionGrammarLexer : Lexer {
	public const int
		CARET=1, STAR=2, SLASH=3, PERCENT=4, PLUS=5, MINUS=6, EQUAL=7, NOT_EQUAL=8,
		LOGICAL_AND=9, LOGICAL_OR=10, QUESTION=11, COLON=12, ID=13, DIGIT=14,
		WS=15;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CARET", "STAR", "SLASH", "PERCENT", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL",
		"LOGICAL_AND", "LOGICAL_OR", "QUESTION", "COLON", "ID", "DIGIT", "WS"
	};


	public LeftRecursionGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", "'!='", "'&&'",
		"'||'", "'?'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CARET", "STAR", "SLASH", "PERCENT", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL",
		"LOGICAL_AND", "LOGICAL_OR", "QUESTION", "COLON", "ID", "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LeftRecursionGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x11M\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3"+
		"\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\a\xE@\n\xE\f\xE\xE\xE\x43\v\xE\x3\xF\x6"+
		"\xF\x46\n\xF\r\xF\xE\xFG\x3\x10\x3\x10\x3\x10\x3\x10\x2\x2\x2\x11\x3\x2"+
		"\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15"+
		"\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11\x3\x2\x6\x5\x2"+
		"\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x3\x2\x32;\x5\x2\v\f"+
		"\xF\xF\"\"N\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t"+
		"\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11"+
		"\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2"+
		"\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2"+
		"\x2\x2\x3!\x3\x2\x2\x2\x5#\x3\x2\x2\x2\a%\x3\x2\x2\x2\t\'\x3\x2\x2\x2"+
		"\v)\x3\x2\x2\x2\r+\x3\x2\x2\x2\xF-\x3\x2\x2\x2\x11\x30\x3\x2\x2\x2\x13"+
		"\x33\x3\x2\x2\x2\x15\x36\x3\x2\x2\x2\x17\x39\x3\x2\x2\x2\x19;\x3\x2\x2"+
		"\x2\x1B=\x3\x2\x2\x2\x1D\x45\x3\x2\x2\x2\x1FI\x3\x2\x2\x2!\"\a`\x2\x2"+
		"\"\x4\x3\x2\x2\x2#$\a,\x2\x2$\x6\x3\x2\x2\x2%&\a\x31\x2\x2&\b\x3\x2\x2"+
		"\x2\'(\a\'\x2\x2(\n\x3\x2\x2\x2)*\a-\x2\x2*\f\x3\x2\x2\x2+,\a/\x2\x2,"+
		"\xE\x3\x2\x2\x2-.\a?\x2\x2./\a?\x2\x2/\x10\x3\x2\x2\x2\x30\x31\a#\x2\x2"+
		"\x31\x32\a?\x2\x2\x32\x12\x3\x2\x2\x2\x33\x34\a(\x2\x2\x34\x35\a(\x2\x2"+
		"\x35\x14\x3\x2\x2\x2\x36\x37\a~\x2\x2\x37\x38\a~\x2\x2\x38\x16\x3\x2\x2"+
		"\x2\x39:\a\x41\x2\x2:\x18\x3\x2\x2\x2;<\a<\x2\x2<\x1A\x3\x2\x2\x2=\x41"+
		"\t\x2\x2\x2>@\t\x3\x2\x2?>\x3\x2\x2\x2@\x43\x3\x2\x2\x2\x41?\x3\x2\x2"+
		"\x2\x41\x42\x3\x2\x2\x2\x42\x1C\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x44\x46"+
		"\t\x4\x2\x2\x45\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2G\x45\x3\x2\x2\x2GH\x3"+
		"\x2\x2\x2H\x1E\x3\x2\x2\x2IJ\t\x5\x2\x2JK\x3\x2\x2\x2KL\b\x10\x2\x2L "+
		"\x3\x2\x2\x2\x5\x2\x41G\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AntlrOptimized
