extern alias AntlrStandard;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Kvanttt\Documents\DAGE Grammars\LeftRecursionGrammar\LeftRecursionGrammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrStandard {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using AntlrStandard::Antlr4.Runtime;
using AntlrStandard::Antlr4.Runtime.Atn;
using AntlrStandard::Antlr4.Runtime.Misc;
using AntlrStandard::Antlr4.Runtime.Tree;
using DFA = AntlrStandard::Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LeftRecursionGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CARET=1, STAR=2, SLASH=3, PERCENT=4, PLUS=5, MINUS=6, EQUAL=7, NOT_EQUAL=8,
		LOGICAL_AND=9, LOGICAL_OR=10, QUESTION=11, COLON=12, ID=13, DIGIT=14,
		WS=15;
	public const int
		RULE_leftRecExprRoot = 0, RULE_notLeftRecExprRoot = 1, RULE_leftRecExpr = 2,
		RULE_notLeftRecExpr = 3, RULE_logicalAndExpr = 4, RULE_equalExpr = 5,
		RULE_addExpr = 6, RULE_multExpr = 7, RULE_powerExpr = 8, RULE_atom = 9;
	public static readonly string[] ruleNames = {
		"leftRecExprRoot", "notLeftRecExprRoot", "leftRecExpr", "notLeftRecExpr",
		"logicalAndExpr", "equalExpr", "addExpr", "multExpr", "powerExpr", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", "'!='", "'&&'",
		"'||'", "'?'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CARET", "STAR", "SLASH", "PERCENT", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL",
		"LOGICAL_AND", "LOGICAL_OR", "QUESTION", "COLON", "ID", "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LeftRecursionGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LeftRecursionGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LeftRecursionGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LeftRecursionGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LeftRecExprRootContext : ParserRuleContext {
		public LeftRecExprContext leftRecExpr() {
			return GetRuleContext<LeftRecExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LeftRecursionGrammarParser.Eof, 0); }
		public LeftRecExprRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftRecExprRoot; } }
	}

	[RuleVersion(0)]
	public LeftRecExprRootContext leftRecExprRoot() {
		LeftRecExprRootContext _localctx = new LeftRecExprRootContext(Context, State);
		EnterRule(_localctx, 0, RULE_leftRecExprRoot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; leftRecExpr(0);
			State = 21; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotLeftRecExprRootContext : ParserRuleContext {
		public NotLeftRecExprContext notLeftRecExpr() {
			return GetRuleContext<NotLeftRecExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LeftRecursionGrammarParser.Eof, 0); }
		public NotLeftRecExprRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notLeftRecExprRoot; } }
	}

	[RuleVersion(0)]
	public NotLeftRecExprRootContext notLeftRecExprRoot() {
		NotLeftRecExprRootContext _localctx = new NotLeftRecExprRootContext(Context, State);
		EnterRule(_localctx, 2, RULE_notLeftRecExprRoot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23; notLeftRecExpr();
			State = 24; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftRecExprContext : ParserRuleContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public LeftRecExprContext[] leftRecExpr() {
			return GetRuleContexts<LeftRecExprContext>();
		}
		public LeftRecExprContext leftRecExpr(int i) {
			return GetRuleContext<LeftRecExprContext>(i);
		}
		public ITerminalNode CARET() { return GetToken(LeftRecursionGrammarParser.CARET, 0); }
		public ITerminalNode STAR() { return GetToken(LeftRecursionGrammarParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(LeftRecursionGrammarParser.SLASH, 0); }
		public ITerminalNode PERCENT() { return GetToken(LeftRecursionGrammarParser.PERCENT, 0); }
		public ITerminalNode PLUS() { return GetToken(LeftRecursionGrammarParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(LeftRecursionGrammarParser.MINUS, 0); }
		public ITerminalNode EQUAL() { return GetToken(LeftRecursionGrammarParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(LeftRecursionGrammarParser.NOT_EQUAL, 0); }
		public ITerminalNode LOGICAL_AND() { return GetToken(LeftRecursionGrammarParser.LOGICAL_AND, 0); }
		public ITerminalNode LOGICAL_OR() { return GetToken(LeftRecursionGrammarParser.LOGICAL_OR, 0); }
		public LeftRecExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftRecExpr; } }
	}

	[RuleVersion(0)]
	public LeftRecExprContext leftRecExpr() {
		return leftRecExpr(0);
	}

	private LeftRecExprContext leftRecExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LeftRecExprContext _localctx = new LeftRecExprContext(Context, _parentState);
		LeftRecExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_leftRecExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 27; atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 49;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=AntlrStandard::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 47;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 29;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 30; Match(CARET);
						State = 31; leftRecExpr(6);
						}
						break;
					case 2:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 32;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 33;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 34; leftRecExpr(6);
						}
						break;
					case 3:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 35;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 36;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 37; leftRecExpr(5);
						}
						break;
					case 4:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 38;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 39;
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOT_EQUAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 40; leftRecExpr(4);
						}
						break;
					case 5:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 41;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 42; Match(LOGICAL_AND);
						State = 43; leftRecExpr(3);
						}
						break;
					case 6:
						{
						_localctx = new LeftRecExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_leftRecExpr);
						State = 44;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 45; Match(LOGICAL_OR);
						State = 46; leftRecExpr(2);
						}
						break;
					}
					}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NotLeftRecExprContext : ParserRuleContext {
		public LogicalAndExprContext[] logicalAndExpr() {
			return GetRuleContexts<LogicalAndExprContext>();
		}
		public LogicalAndExprContext logicalAndExpr(int i) {
			return GetRuleContext<LogicalAndExprContext>(i);
		}
		public ITerminalNode[] LOGICAL_OR() { return GetTokens(LeftRecursionGrammarParser.LOGICAL_OR); }
		public ITerminalNode LOGICAL_OR(int i) {
			return GetToken(LeftRecursionGrammarParser.LOGICAL_OR, i);
		}
		public NotLeftRecExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notLeftRecExpr; } }
	}

	[RuleVersion(0)]
	public NotLeftRecExprContext notLeftRecExpr() {
		NotLeftRecExprContext _localctx = new NotLeftRecExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_notLeftRecExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; logicalAndExpr();
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_OR) {
				{
				{
				State = 53; Match(LOGICAL_OR);
				State = 54; logicalAndExpr();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExprContext : ParserRuleContext {
		public EqualExprContext[] equalExpr() {
			return GetRuleContexts<EqualExprContext>();
		}
		public EqualExprContext equalExpr(int i) {
			return GetRuleContext<EqualExprContext>(i);
		}
		public ITerminalNode[] LOGICAL_AND() { return GetTokens(LeftRecursionGrammarParser.LOGICAL_AND); }
		public ITerminalNode LOGICAL_AND(int i) {
			return GetToken(LeftRecursionGrammarParser.LOGICAL_AND, i);
		}
		public LogicalAndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpr; } }
	}

	[RuleVersion(0)]
	public LogicalAndExprContext logicalAndExpr() {
		LogicalAndExprContext _localctx = new LogicalAndExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_logicalAndExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; equalExpr();
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_AND) {
				{
				{
				State = 61; Match(LOGICAL_AND);
				State = 62; equalExpr();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(LeftRecursionGrammarParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(LeftRecursionGrammarParser.EQUAL, i);
		}
		public ITerminalNode[] NOT_EQUAL() { return GetTokens(LeftRecursionGrammarParser.NOT_EQUAL); }
		public ITerminalNode NOT_EQUAL(int i) {
			return GetToken(LeftRecursionGrammarParser.NOT_EQUAL, i);
		}
		public EqualExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalExpr; } }
	}

	[RuleVersion(0)]
	public EqualExprContext equalExpr() {
		EqualExprContext _localctx = new EqualExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_equalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; addExpr();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQUAL || _la==NOT_EQUAL) {
				{
				{
				State = 69;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUAL || _la==NOT_EQUAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 70; addExpr();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(LeftRecursionGrammarParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(LeftRecursionGrammarParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(LeftRecursionGrammarParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(LeftRecursionGrammarParser.MINUS, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; multExpr();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 77;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 78; multExpr();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		public PowerExprContext[] powerExpr() {
			return GetRuleContexts<PowerExprContext>();
		}
		public PowerExprContext powerExpr(int i) {
			return GetRuleContext<PowerExprContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(LeftRecursionGrammarParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(LeftRecursionGrammarParser.STAR, i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(LeftRecursionGrammarParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(LeftRecursionGrammarParser.SLASH, i);
		}
		public ITerminalNode[] PERCENT() { return GetTokens(LeftRecursionGrammarParser.PERCENT); }
		public ITerminalNode PERCENT(int i) {
			return GetToken(LeftRecursionGrammarParser.PERCENT, i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_multExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; powerExpr();
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) {
				{
				{
				State = 85;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 86; powerExpr();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerExprContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ITerminalNode[] CARET() { return GetTokens(LeftRecursionGrammarParser.CARET); }
		public ITerminalNode CARET(int i) {
			return GetToken(LeftRecursionGrammarParser.CARET, i);
		}
		public PowerExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powerExpr; } }
	}

	[RuleVersion(0)]
	public PowerExprContext powerExpr() {
		PowerExprContext _localctx = new PowerExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_powerExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; atom();
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 93; Match(CARET);
				State = 94; atom();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(LeftRecursionGrammarParser.ID, 0); }
		public ITerminalNode DIGIT() { return GetToken(LeftRecursionGrammarParser.DIGIT, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==DIGIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return leftRecExpr_sempred((LeftRecExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool leftRecExpr_sempred(LeftRecExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
		'\x5964', '\x3', '\x11', 'i', '\x4', '\x2', '\t', '\x2', '\x4', '\x3',
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4',
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b',
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v',
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3',
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x32', '\n', '\x4', '\f', '\x4',
		'\xE', '\x4', '\x35', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3',
		'\x5', '\a', '\x5', ':', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '=',
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x42',
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x45', '\v', '\x6', '\x3', '\a',
		'\x3', '\a', '\x3', '\a', '\a', '\a', 'J', '\n', '\a', '\f', '\a', '\xE',
		'\a', 'M', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b',
		'R', '\n', '\b', '\f', '\b', '\xE', '\b', 'U', '\v', '\b', '\x3', '\t',
		'\x3', '\t', '\x3', '\t', '\a', '\t', 'Z', '\n', '\t', '\f', '\t', '\xE',
		'\t', ']', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n',
		'\x62', '\n', '\n', '\f', '\n', '\xE', '\n', '\x65', '\v', '\n', '\x3',
		'\v', '\x3', '\v', '\x3', '\v', '\x2', '\x3', '\x6', '\f', '\x2', '\x4',
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x6',
		'\x3', '\x2', '\x4', '\x6', '\x3', '\x2', '\a', '\b', '\x3', '\x2', '\t',
		'\n', '\x3', '\x2', '\xF', '\x10', '\x2', 'j', '\x2', '\x16', '\x3', '\x2',
		'\x2', '\x2', '\x4', '\x19', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1C',
		'\x3', '\x2', '\x2', '\x2', '\b', '\x36', '\x3', '\x2', '\x2', '\x2',
		'\n', '>', '\x3', '\x2', '\x2', '\x2', '\f', '\x46', '\x3', '\x2', '\x2',
		'\x2', '\xE', 'N', '\x3', '\x2', '\x2', '\x2', '\x10', 'V', '\x3', '\x2',
		'\x2', '\x2', '\x12', '^', '\x3', '\x2', '\x2', '\x2', '\x14', '\x66',
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x5', '\x6', '\x4', '\x2',
		'\x17', '\x18', '\a', '\x2', '\x2', '\x3', '\x18', '\x3', '\x3', '\x2',
		'\x2', '\x2', '\x19', '\x1A', '\x5', '\b', '\x5', '\x2', '\x1A', '\x1B',
		'\a', '\x2', '\x2', '\x3', '\x1B', '\x5', '\x3', '\x2', '\x2', '\x2',
		'\x1C', '\x1D', '\b', '\x4', '\x1', '\x2', '\x1D', '\x1E', '\x5', '\x14',
		'\v', '\x2', '\x1E', '\x33', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ',
		'\f', '\b', '\x2', '\x2', ' ', '!', '\a', '\x3', '\x2', '\x2', '!', '\x32',
		'\x5', '\x6', '\x4', '\b', '\"', '#', '\f', '\a', '\x2', '\x2', '#', '$',
		'\t', '\x2', '\x2', '\x2', '$', '\x32', '\x5', '\x6', '\x4', '\b', '%',
		'&', '\f', '\x6', '\x2', '\x2', '&', '\'', '\t', '\x3', '\x2', '\x2',
		'\'', '\x32', '\x5', '\x6', '\x4', '\a', '(', ')', '\f', '\x5', '\x2',
		'\x2', ')', '*', '\t', '\x4', '\x2', '\x2', '*', '\x32', '\x5', '\x6',
		'\x4', '\x6', '+', ',', '\f', '\x4', '\x2', '\x2', ',', '-', '\a', '\v',
		'\x2', '\x2', '-', '\x32', '\x5', '\x6', '\x4', '\x5', '.', '/', '\f',
		'\x3', '\x2', '\x2', '/', '\x30', '\a', '\f', '\x2', '\x2', '\x30', '\x32',
		'\x5', '\x6', '\x4', '\x4', '\x31', '\x1F', '\x3', '\x2', '\x2', '\x2',
		'\x31', '\"', '\x3', '\x2', '\x2', '\x2', '\x31', '%', '\x3', '\x2', '\x2',
		'\x2', '\x31', '(', '\x3', '\x2', '\x2', '\x2', '\x31', '+', '\x3', '\x2',
		'\x2', '\x2', '\x31', '.', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35',
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2',
		'\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\a', '\x3', '\x2',
		'\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', ';',
		'\x5', '\n', '\x6', '\x2', '\x37', '\x38', '\a', '\f', '\x2', '\x2', '\x38',
		':', '\x5', '\n', '\x6', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2',
		':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2',
		'\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '\t', '\x3', '\x2',
		'\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '\x43', '\x5',
		'\f', '\a', '\x2', '?', '@', '\a', '\v', '\x2', '\x2', '@', '\x42', '\x5',
		'\f', '\a', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45',
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2',
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\v', '\x3', '\x2',
		'\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'K',
		'\x5', '\xE', '\b', '\x2', 'G', 'H', '\t', '\x4', '\x2', '\x2', 'H', 'J',
		'\x5', '\xE', '\b', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J',
		'M', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2',
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', '\r', '\x3', '\x2', '\x2',
		'\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'S', '\x5', '\x10',
		'\t', '\x2', 'O', 'P', '\t', '\x3', '\x2', '\x2', 'P', 'R', '\x5', '\x10',
		'\t', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2',
		'\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2',
		'\x2', '\x2', 'T', '\xF', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3',
		'\x2', '\x2', '\x2', 'V', '[', '\x5', '\x12', '\n', '\x2', 'W', 'X', '\t',
		'\x2', '\x2', '\x2', 'X', 'Z', '\x5', '\x12', '\n', '\x2', 'Y', 'W', '\x3',
		'\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3',
		'\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '\x11',
		'\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^',
		'\x63', '\x5', '\x14', '\v', '\x2', '_', '`', '\a', '\x3', '\x2', '\x2',
		'`', '\x62', '\x5', '\x14', '\v', '\x2', '\x61', '_', '\x3', '\x2', '\x2',
		'\x2', '\x62', '\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3',
		'\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64',
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2',
		'\x2', '\x66', 'g', '\t', '\x5', '\x2', '\x2', 'g', '\x15', '\x3', '\x2',
		'\x2', '\x2', '\n', '\x31', '\x33', ';', '\x43', 'K', 'S', '[', '\x63',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrStandard
