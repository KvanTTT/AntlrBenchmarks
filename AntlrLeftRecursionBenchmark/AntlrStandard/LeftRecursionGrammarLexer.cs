extern alias AntlrStandard;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrStandard {
using System;
using System.IO;
using System.Text;
using AntlrStandard::Antlr4.Runtime;
using AntlrStandard::Antlr4.Runtime.Atn;
using AntlrStandard::Antlr4.Runtime.Misc;
using DFA = AntlrStandard::Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LeftRecursionGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CARET=1, STAR=2, SLASH=3, PERCENT=4, PLUS=5, MINUS=6, EQUAL=7, NOT_EQUAL=8,
		LOGICAL_AND=9, LOGICAL_OR=10, QUESTION=11, COLON=12, ID=13, DIGIT=14,
		WS=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CARET", "STAR", "SLASH", "PERCENT", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL",
		"LOGICAL_AND", "LOGICAL_OR", "QUESTION", "COLON", "ID", "DIGIT", "WS"
	};


	public LeftRecursionGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LeftRecursionGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", "'!='", "'&&'",
		"'||'", "'?'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CARET", "STAR", "SLASH", "PERCENT", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL",
		"LOGICAL_AND", "LOGICAL_OR", "QUESTION", "COLON", "ID", "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LeftRecursionGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LeftRecursionGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
		'\x5964', '\x2', '\x11', 'M', '\b', '\x1', '\x4', '\x2', '\t', '\x2',
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t',
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b',
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v',
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE',
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3',
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3',
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3',
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t',
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3',
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r',
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '@', '\n', '\xE',
		'\f', '\xE', '\xE', '\xE', '\x43', '\v', '\xE', '\x3', '\xF', '\x6', '\xF',
		'\x46', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 'G', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x2', '\x2', '\x11', '\x3', '\x3',
		'\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF',
		'\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19',
		'\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '\x3', '\x2', '\x6',
		'\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', '\x2',
		'\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x3', '\x2',
		'\x32', ';', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2',
		'N', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2',
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3',
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r',
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2',
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2',
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17',
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2',
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2',
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x3', '!', '\x3',
		'\x2', '\x2', '\x2', '\x5', '#', '\x3', '\x2', '\x2', '\x2', '\a', '%',
		'\x3', '\x2', '\x2', '\x2', '\t', '\'', '\x3', '\x2', '\x2', '\x2', '\v',
		')', '\x3', '\x2', '\x2', '\x2', '\r', '+', '\x3', '\x2', '\x2', '\x2',
		'\xF', '-', '\x3', '\x2', '\x2', '\x2', '\x11', '\x30', '\x3', '\x2',
		'\x2', '\x2', '\x13', '\x33', '\x3', '\x2', '\x2', '\x2', '\x15', '\x36',
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x39', '\x3', '\x2', '\x2', '\x2',
		'\x19', ';', '\x3', '\x2', '\x2', '\x2', '\x1B', '=', '\x3', '\x2', '\x2',
		'\x2', '\x1D', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1F', 'I', '\x3',
		'\x2', '\x2', '\x2', '!', '\"', '\a', '`', '\x2', '\x2', '\"', '\x4',
		'\x3', '\x2', '\x2', '\x2', '#', '$', '\a', ',', '\x2', '\x2', '$', '\x6',
		'\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '\x31', '\x2', '\x2', '&',
		'\b', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\'', '\x2', '\x2',
		'(', '\n', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '-', '\x2', '\x2',
		'*', '\f', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '/', '\x2', '\x2',
		',', '\xE', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '?', '\x2', '\x2',
		'.', '/', '\a', '?', '\x2', '\x2', '/', '\x10', '\x3', '\x2', '\x2', '\x2',
		'\x30', '\x31', '\a', '#', '\x2', '\x2', '\x31', '\x32', '\a', '?', '\x2',
		'\x2', '\x32', '\x12', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a',
		'(', '\x2', '\x2', '\x34', '\x35', '\a', '(', '\x2', '\x2', '\x35', '\x14',
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', '~', '\x2', '\x2', '\x37',
		'\x38', '\a', '~', '\x2', '\x2', '\x38', '\x16', '\x3', '\x2', '\x2',
		'\x2', '\x39', ':', '\a', '\x41', '\x2', '\x2', ':', '\x18', '\x3', '\x2',
		'\x2', '\x2', ';', '<', '\a', '<', '\x2', '\x2', '<', '\x1A', '\x3', '\x2',
		'\x2', '\x2', '=', '\x41', '\t', '\x2', '\x2', '\x2', '>', '@', '\t',
		'\x3', '\x2', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x43',
		'\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41',
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1C', '\x3', '\x2', '\x2',
		'\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\t',
		'\x4', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46',
		'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2',
		'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\x1E', '\x3', '\x2', '\x2',
		'\x2', 'I', 'J', '\t', '\x5', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2',
		'\x2', 'K', 'L', '\b', '\x10', '\x2', '\x2', 'L', ' ', '\x3', '\x2', '\x2',
		'\x2', '\x5', '\x2', '\x41', 'G', '\x3', '\x2', '\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrStandard
